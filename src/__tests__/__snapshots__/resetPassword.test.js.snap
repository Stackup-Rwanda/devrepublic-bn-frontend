// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resetPassword component tests should render resetPassword title 1`] = `
<IntlProvider
  defaultFormats={Object {}}
  defaultLocale="en"
  formats={Object {}}
  locale="en"
  messages={
    Object {
      "ASSIGN A MANAGER": "ASSIGN A MANAGER",
      "Accommodation": "Accommodation",
      "Add rating": "Add rating",
      "All Users": "All Users",
      "All travel Requests": "All travel Requests",
      "Assign": "Assign",
      "Book": "Book",
      "Cancel": "Cancel",
      "Checkin": "Checkin",
      "Checkout": "Checkout",
      "Choose...": "Choose...",
      "Copyright 2020 devrepublic team. All rights reserved.": "Copyright 2020 devrepublic team. All rights reserved.",
      "Create an Account": "Create an Account",
      "Currency": "Currency",
      "Date Joined": "Date Joined",
      "Date of birth": "Date of birth",
      "Department": "Department",
      "Departure": "Departure",
      "Departure Date": "Departure Date",
      "Email must be valid": "Email must be valid",
      "Email notification": "Email notification",
      "Enter a valid email": "Enter a valid email",
      "Enter email": "Enter email",
      "Facilities": "Facilities",
      "Facilities available": "Facilities available",
      "Female": "Female",
      "First name": "First name",
      "Forgot password?": "Forgot password?",
      "Forgot your password": "Forgot your password",
      "Gender": "Gender",
      "HOME": "Home",
      "Have more control on your travel experience.": "Have more control on your travel experience.",
      "Input a valid department(IT, Finance, communication)": "Input a valid department(IT, Finance, communication)",
      "LOGIN": "LOGIN",
      "Language": "Language",
      "Last Name": "Last Name",
      "Loading...": "Loading...",
      "Log In": "Log In",
      "Make travel arrangement with us.": "Make travel arrangement with us.",
      "Male": "Male",
      "Manager": "Manager",
      "Manager Dashboard": "Manager Dashboard",
      "New Password": "New Password",
      "No request created by your direct reports yet!": "No request created by your direct reports yet!",
      "No request found. Create a request!": "No request found. Create a request!",
      "Or Use": "Or Use",
      "Overview": "Overview",
      "Password": "Password",
      "Please wait...": "Please wait...",
      "Profile": "Profile",
      "Profile Settings": "Profile Settings",
      "RESET": "RESET",
      "Reason:": "Reason",
      "Receive email notification": "Receive email notification",
      "Register": "Register",
      "Requester": "Requester",
      "Requester Dashboard": "Requester Dashboard",
      "Reset your password": "Reset your password",
      "Residence": "Residence",
      "Residence is required": "Residence is required",
      "Role": "Role",
      "Roles": "Roles",
      "SET ROLE": "SET ROLE",
      "Save": "Save",
      "Saved successfully": "Saved successfully",
      "Saving": "Saving",
      "Send email": "Send email",
      "Set Role": "Set Role",
      "Sign Up": "Sign Up",
      "Status": "Status",
      "Super Admin Dashboard": "Super Admin Dashboard",
      "Travel Requests": "Travel Requests",
      "Trip Details": "Trip Details",
      "Trips": "Trips",
      "Type": "Type",
      "Use a password of at least 8 characters: uppercase, lowercase letters, numbers and special characters": "Use a password of at least 8 characters: uppercase, lowercase letters, numbers and special characters",
      "User": "User",
      "Users": "Users",
      "We only support EUR, USD and RWF": "We only support EUR, USD and RWF",
      "Welcome to Barefoot Nomad": "Welcome to Barefoot Nomad",
      "Welcome! Verify your account first.": "Welcome! Verify your account first.",
      "Wrong email or password. Please Enter valid credential": "Wrong email or password. Please Enter valid credential",
      "all notification already seen": "all notification already seen",
      "available rooms": "available rooms",
      "check your email to reset your password": "check your email to reset your password",
      "close": "close",
      "date of birth is required": "date of birth is required",
      "department": "department",
      "fill out or modify your profile before saving": "fill out or modify your profile before saving",
      "manager": "manager",
      "mark all as read": "mark all as read",
      "open": "open",
      "opt in": "opt in",
      "opt out": "opt out",
      "password reset successfully": "password reset successfully",
      "please choose a room first": "please choose a room first",
      "rejected": "rejected",
      "requester": "requester",
      "super administrator": "super administrator",
      "supplier": "supplier",
      "travel administrator": "travel administrator",
      "travel team member": "travel team member",
      "upload": "upload",
      "user not found on reset": "user not found, check your input for any mistake",
      "view less": "view less",
      "view more": "view more",
      "we only support French and English": "we only support French and English",
    }
  }
  onError={[Function]}
  textComponent={Symbol(react.fragment)}
>
  <Provider
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
  >
    <injectIntl(Connect(resetPassword))
      history={Object {}}
      intl={Object {}}
      location={
        Object {
          "search": "http://localhost:3000/password/reset?token=thisismyfaketoken",
        }
      }
      push={[MockFunction]}
      resetPasswordAction={[MockFunction]}
      user={Object {}}
    >
      <Connect(resetPassword)
        history={Object {}}
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatDateToParts": [Function],
            "formatDisplayName": [Function],
            "formatList": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatNumberToParts": [Function],
            "formatPlural": [Function],
            "formatRelativeTime": [Function],
            "formatTime": [Function],
            "formatTimeToParts": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getDisplayNames": [Function],
              "getListFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralRules": [Function],
              "getRelativeTimeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {
              "ASSIGN A MANAGER": "ASSIGN A MANAGER",
              "Accommodation": "Accommodation",
              "Add rating": "Add rating",
              "All Users": "All Users",
              "All travel Requests": "All travel Requests",
              "Assign": "Assign",
              "Book": "Book",
              "Cancel": "Cancel",
              "Checkin": "Checkin",
              "Checkout": "Checkout",
              "Choose...": "Choose...",
              "Copyright 2020 devrepublic team. All rights reserved.": "Copyright 2020 devrepublic team. All rights reserved.",
              "Create an Account": "Create an Account",
              "Currency": "Currency",
              "Date Joined": "Date Joined",
              "Date of birth": "Date of birth",
              "Department": "Department",
              "Departure": "Departure",
              "Departure Date": "Departure Date",
              "Email must be valid": "Email must be valid",
              "Email notification": "Email notification",
              "Enter a valid email": "Enter a valid email",
              "Enter email": "Enter email",
              "Facilities": "Facilities",
              "Facilities available": "Facilities available",
              "Female": "Female",
              "First name": "First name",
              "Forgot password?": "Forgot password?",
              "Forgot your password": "Forgot your password",
              "Gender": "Gender",
              "HOME": "Home",
              "Have more control on your travel experience.": "Have more control on your travel experience.",
              "Input a valid department(IT, Finance, communication)": "Input a valid department(IT, Finance, communication)",
              "LOGIN": "LOGIN",
              "Language": "Language",
              "Last Name": "Last Name",
              "Loading...": "Loading...",
              "Log In": "Log In",
              "Make travel arrangement with us.": "Make travel arrangement with us.",
              "Male": "Male",
              "Manager": "Manager",
              "Manager Dashboard": "Manager Dashboard",
              "New Password": "New Password",
              "No request created by your direct reports yet!": "No request created by your direct reports yet!",
              "No request found. Create a request!": "No request found. Create a request!",
              "Or Use": "Or Use",
              "Overview": "Overview",
              "Password": "Password",
              "Please wait...": "Please wait...",
              "Profile": "Profile",
              "Profile Settings": "Profile Settings",
              "RESET": "RESET",
              "Reason:": "Reason",
              "Receive email notification": "Receive email notification",
              "Register": "Register",
              "Requester": "Requester",
              "Requester Dashboard": "Requester Dashboard",
              "Reset your password": "Reset your password",
              "Residence": "Residence",
              "Residence is required": "Residence is required",
              "Role": "Role",
              "Roles": "Roles",
              "SET ROLE": "SET ROLE",
              "Save": "Save",
              "Saved successfully": "Saved successfully",
              "Saving": "Saving",
              "Send email": "Send email",
              "Set Role": "Set Role",
              "Sign Up": "Sign Up",
              "Status": "Status",
              "Super Admin Dashboard": "Super Admin Dashboard",
              "Travel Requests": "Travel Requests",
              "Trip Details": "Trip Details",
              "Trips": "Trips",
              "Type": "Type",
              "Use a password of at least 8 characters: uppercase, lowercase letters, numbers and special characters": "Use a password of at least 8 characters: uppercase, lowercase letters, numbers and special characters",
              "User": "User",
              "Users": "Users",
              "We only support EUR, USD and RWF": "We only support EUR, USD and RWF",
              "Welcome to Barefoot Nomad": "Welcome to Barefoot Nomad",
              "Welcome! Verify your account first.": "Welcome! Verify your account first.",
              "Wrong email or password. Please Enter valid credential": "Wrong email or password. Please Enter valid credential",
              "all notification already seen": "all notification already seen",
              "available rooms": "available rooms",
              "check your email to reset your password": "check your email to reset your password",
              "close": "close",
              "date of birth is required": "date of birth is required",
              "department": "department",
              "fill out or modify your profile before saving": "fill out or modify your profile before saving",
              "manager": "manager",
              "mark all as read": "mark all as read",
              "open": "open",
              "opt in": "opt in",
              "opt out": "opt out",
              "password reset successfully": "password reset successfully",
              "please choose a room first": "please choose a room first",
              "rejected": "rejected",
              "requester": "requester",
              "super administrator": "super administrator",
              "supplier": "supplier",
              "travel administrator": "travel administrator",
              "travel team member": "travel team member",
              "upload": "upload",
              "user not found on reset": "user not found, check your input for any mistake",
              "view less": "view less",
              "view more": "view more",
              "we only support French and English": "we only support French and English",
            },
            "onError": [Function],
            "textComponent": Symbol(react.fragment),
            "timeZone": undefined,
            "wrapRichTextChunksInFragment": undefined,
          }
        }
        location={
          Object {
            "search": "http://localhost:3000/password/reset?token=thisismyfaketoken",
          }
        }
        push={[MockFunction]}
        resetPasswordAction={[MockFunction]}
        user={Object {}}
      >
        <resetPassword
          history={Object {}}
          intl={
            Object {
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatDateToParts": [Function],
              "formatDisplayName": [Function],
              "formatList": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatNumberToParts": [Function],
              "formatPlural": [Function],
              "formatRelativeTime": [Function],
              "formatTime": [Function],
              "formatTimeToParts": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getDisplayNames": [Function],
                "getListFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralRules": [Function],
                "getRelativeTimeFormat": [Function],
              },
              "locale": "en",
              "messages": Object {
                "ASSIGN A MANAGER": "ASSIGN A MANAGER",
                "Accommodation": "Accommodation",
                "Add rating": "Add rating",
                "All Users": "All Users",
                "All travel Requests": "All travel Requests",
                "Assign": "Assign",
                "Book": "Book",
                "Cancel": "Cancel",
                "Checkin": "Checkin",
                "Checkout": "Checkout",
                "Choose...": "Choose...",
                "Copyright 2020 devrepublic team. All rights reserved.": "Copyright 2020 devrepublic team. All rights reserved.",
                "Create an Account": "Create an Account",
                "Currency": "Currency",
                "Date Joined": "Date Joined",
                "Date of birth": "Date of birth",
                "Department": "Department",
                "Departure": "Departure",
                "Departure Date": "Departure Date",
                "Email must be valid": "Email must be valid",
                "Email notification": "Email notification",
                "Enter a valid email": "Enter a valid email",
                "Enter email": "Enter email",
                "Facilities": "Facilities",
                "Facilities available": "Facilities available",
                "Female": "Female",
                "First name": "First name",
                "Forgot password?": "Forgot password?",
                "Forgot your password": "Forgot your password",
                "Gender": "Gender",
                "HOME": "Home",
                "Have more control on your travel experience.": "Have more control on your travel experience.",
                "Input a valid department(IT, Finance, communication)": "Input a valid department(IT, Finance, communication)",
                "LOGIN": "LOGIN",
                "Language": "Language",
                "Last Name": "Last Name",
                "Loading...": "Loading...",
                "Log In": "Log In",
                "Make travel arrangement with us.": "Make travel arrangement with us.",
                "Male": "Male",
                "Manager": "Manager",
                "Manager Dashboard": "Manager Dashboard",
                "New Password": "New Password",
                "No request created by your direct reports yet!": "No request created by your direct reports yet!",
                "No request found. Create a request!": "No request found. Create a request!",
                "Or Use": "Or Use",
                "Overview": "Overview",
                "Password": "Password",
                "Please wait...": "Please wait...",
                "Profile": "Profile",
                "Profile Settings": "Profile Settings",
                "RESET": "RESET",
                "Reason:": "Reason",
                "Receive email notification": "Receive email notification",
                "Register": "Register",
                "Requester": "Requester",
                "Requester Dashboard": "Requester Dashboard",
                "Reset your password": "Reset your password",
                "Residence": "Residence",
                "Residence is required": "Residence is required",
                "Role": "Role",
                "Roles": "Roles",
                "SET ROLE": "SET ROLE",
                "Save": "Save",
                "Saved successfully": "Saved successfully",
                "Saving": "Saving",
                "Send email": "Send email",
                "Set Role": "Set Role",
                "Sign Up": "Sign Up",
                "Status": "Status",
                "Super Admin Dashboard": "Super Admin Dashboard",
                "Travel Requests": "Travel Requests",
                "Trip Details": "Trip Details",
                "Trips": "Trips",
                "Type": "Type",
                "Use a password of at least 8 characters: uppercase, lowercase letters, numbers and special characters": "Use a password of at least 8 characters: uppercase, lowercase letters, numbers and special characters",
                "User": "User",
                "Users": "Users",
                "We only support EUR, USD and RWF": "We only support EUR, USD and RWF",
                "Welcome to Barefoot Nomad": "Welcome to Barefoot Nomad",
                "Welcome! Verify your account first.": "Welcome! Verify your account first.",
                "Wrong email or password. Please Enter valid credential": "Wrong email or password. Please Enter valid credential",
                "all notification already seen": "all notification already seen",
                "available rooms": "available rooms",
                "check your email to reset your password": "check your email to reset your password",
                "close": "close",
                "date of birth is required": "date of birth is required",
                "department": "department",
                "fill out or modify your profile before saving": "fill out or modify your profile before saving",
                "manager": "manager",
                "mark all as read": "mark all as read",
                "open": "open",
                "opt in": "opt in",
                "opt out": "opt out",
                "password reset successfully": "password reset successfully",
                "please choose a room first": "please choose a room first",
                "rejected": "rejected",
                "requester": "requester",
                "super administrator": "super administrator",
                "supplier": "supplier",
                "travel administrator": "travel administrator",
                "travel team member": "travel team member",
                "upload": "upload",
                "user not found on reset": "user not found, check your input for any mistake",
                "view less": "view less",
                "view more": "view more",
                "we only support French and English": "we only support French and English",
              },
              "onError": [Function],
              "textComponent": Symbol(react.fragment),
              "timeZone": undefined,
              "wrapRichTextChunksInFragment": undefined,
            }
          }
          location={
            Object {
              "search": "http://localhost:3000/password/reset?token=thisismyfaketoken",
            }
          }
          push={[MockFunction]}
          resetPasswordAction={[Function]}
          user={
            Object {
              "error": null,
              "user": Object {
                "data": null,
                "isVerified": false,
              },
            }
          }
        >
          <Connect(NavBarComponent)>
            <NavBarComponent
              language={
                Object {
                  "language": "en",
                }
              }
              selectLanguage={[Function]}
            >
              <Navbar
                className="nav-bar"
                collapseOnSelect={false}
                expand="lg"
                fixed="top"
                variant="light"
              >
                <nav
                  className="nav-bar navbar navbar-expand-lg navbar-light fixed-top"
                >
                  <NavbarBrand
                    href="/"
                  >
                    <a
                      className="navbar-brand"
                      href="/"
                    >
                      <img
                        alt="barefoot nomad logo"
                        className="d-inline-block align-top"
                        height="30"
                        src="test-file-stub"
                        width="30"
                      />
                    </a>
                  </NavbarBrand>
                  <NavbarToggle
                    aria-controls="responsive-navbar-nav"
                    bsPrefix="navbar-toggler"
                    className="nav-bar_items"
                    label="Toggle navigation"
                  >
                    <button
                      aria-controls="responsive-navbar-nav"
                      aria-label="Toggle navigation"
                      className="nav-bar_items navbar-toggler collapsed"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="navbar-toggler-icon"
                      />
                    </button>
                  </NavbarToggle>
                  <NavbarCollapse
                    bsPrefix="navbar-collapse"
                    id="responsive-navbar-nav"
                  >
                    <Collapse
                      appear={false}
                      dimension="height"
                      getDimensionValue={[Function]}
                      id="responsive-navbar-nav"
                      in={false}
                      mountOnEnter={false}
                      timeout={300}
                      unmountOnExit={false}
                    >
                      <Transition
                        addEndListener={[Function]}
                        appear={false}
                        aria-expanded={null}
                        enter={true}
                        exit={true}
                        id="responsive-navbar-nav"
                        in={false}
                        mountOnEnter={false}
                        onEnter={[Function]}
                        onEntered={[Function]}
                        onEntering={[Function]}
                        onExit={[Function]}
                        onExited={[Function]}
                        onExiting={[Function]}
                        timeout={300}
                        unmountOnExit={false}
                      >
                        <div
                          aria-expanded={null}
                          className="navbar-collapse collapse"
                          id="responsive-navbar-nav"
                        >
                          <Nav
                            className="mr-auto"
                            fill={false}
                            justify={false}
                          >
                            <ForwardRef
                              as="div"
                              className="mr-auto navbar-nav"
                              onSelect={[Function]}
                            >
                              <div
                                className="mr-auto navbar-nav"
                                onKeyDown={[Function]}
                              />
                            </ForwardRef>
                          </Nav>
                          <Nav
                            fill={false}
                            justify={false}
                          >
                            <ForwardRef
                              as="div"
                              className="navbar-nav"
                              onSelect={[Function]}
                            >
                              <div
                                className="navbar-nav"
                                onKeyDown={[Function]}
                              >
                                <NavLink
                                  as={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "displayName": "SafeAnchor",
                                      "render": [Function],
                                    }
                                  }
                                  className="nav-bar_item"
                                  disabled={false}
                                  href="/login"
                                >
                                  <ForwardRef
                                    as={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "displayName": "SafeAnchor",
                                        "render": [Function],
                                      }
                                    }
                                    className="nav-bar_item nav-link"
                                    disabled={false}
                                    href="/login"
                                  >
                                    <SafeAnchor
                                      className="nav-bar_item nav-link"
                                      data-rb-event-key="/login"
                                      disabled={false}
                                      href="/login"
                                      onClick={[Function]}
                                    >
                                      <a
                                        className="nav-bar_item nav-link"
                                        data-rb-event-key="/login"
                                        href="/login"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                      >
                                        <FormattedMessage
                                          id="Log In"
                                          values="Log In"
                                        >
                                          Log In
                                        </FormattedMessage>
                                      </a>
                                    </SafeAnchor>
                                  </ForwardRef>
                                </NavLink>
                                <Button
                                  active={false}
                                  className="nav-bar_btn"
                                  disabled={false}
                                  href="/signup"
                                  type="button"
                                  variant="primary"
                                >
                                  <SafeAnchor
                                    className="nav-bar_btn btn btn-primary"
                                    disabled={false}
                                    href="/signup"
                                  >
                                    <a
                                      className="nav-bar_btn btn btn-primary"
                                      href="/signup"
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                    >
                                      <FormattedMessage
                                        id="Register"
                                        values="Register"
                                      >
                                        Register
                                      </FormattedMessage>
                                    </a>
                                  </SafeAnchor>
                                </Button>
                                <DropdownButton
                                  alignRight={true}
                                  bsPrefix="nav-bar_dropdown"
                                  className="test"
                                  onSelect={[Function]}
                                  title="en"
                                  variant="inherit"
                                >
                                  <Dropdown
                                    alignRight={true}
                                    className="test"
                                    navbar={false}
                                    onSelect={[Function]}
                                  >
                                    <ReactOverlaysDropdown
                                      alignEnd={true}
                                      itemSelector=".dropdown-item:not(.disabled):not(:disabled)"
                                      onToggle={[Function]}
                                    >
                                      <div
                                        className="test dropdown"
                                        onKeyDown={[Function]}
                                      >
                                        <DropdownToggle
                                          childBsPrefix="nav-bar_dropdown"
                                          variant="inherit"
                                        >
                                          <Button
                                            active={false}
                                            aria-expanded={false}
                                            aria-haspopup={true}
                                            bsPrefix="nav-bar_dropdown"
                                            className="dropdown-toggle"
                                            disabled={false}
                                            onClick={[Function]}
                                            type="button"
                                            variant="inherit"
                                          >
                                            <button
                                              aria-expanded={false}
                                              aria-haspopup={true}
                                              className="dropdown-toggle nav-bar_dropdown nav-bar_dropdown-inherit"
                                              disabled={false}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              en
                                            </button>
                                          </Button>
                                        </DropdownToggle>
                                        <DropdownMenu
                                          alignRight={false}
                                          flip={true}
                                        />
                                      </div>
                                    </ReactOverlaysDropdown>
                                  </Dropdown>
                                </DropdownButton>
                              </div>
                            </ForwardRef>
                          </Nav>
                        </div>
                      </Transition>
                    </Collapse>
                  </NavbarCollapse>
                </nav>
              </Navbar>
            </NavBarComponent>
          </Connect(NavBarComponent)>
          <Container
            fluid="lg"
          >
            <div
              className="container-lg"
            >
              <div
                className="content"
              >
                <div
                  className="container password-container p-5 justify-content-md-center"
                >
                  <form
                    className="form-check text-center"
                    onSubmit={[Function]}
                  >
                    <div
                      className="form-group justify-content-center align-items-center"
                    >
                      <h1>
                        <FormattedMessage
                          id="Reset your password"
                          values="Reset your password"
                        >
                          Reset your password
                        </FormattedMessage>
                      </h1>
                      <ErrorAlert
                        message=""
                        otherClassName="center col-md-4"
                        textColor=""
                        visible={false}
                      >
                        <Alert
                          className="text- center col-md-4"
                          closeAriaLabel="Close"
                          color="info"
                          fade={true}
                          isOpen={false}
                          tag="div"
                          transition={
                            Object {
                              "appear": true,
                              "baseClass": "fade",
                              "baseClassActive": "show",
                              "enter": true,
                              "exit": true,
                              "in": true,
                              "mountOnEnter": false,
                              "onEnter": [Function],
                              "onEntered": [Function],
                              "onEntering": [Function],
                              "onExit": [Function],
                              "onExited": [Function],
                              "onExiting": [Function],
                              "tag": "div",
                              "timeout": 150,
                              "unmountOnExit": true,
                            }
                          }
                        >
                          <Fade
                            appear={true}
                            baseClass="fade"
                            baseClassActive="show"
                            className="text- center col-md-4 alert alert-info"
                            enter={true}
                            exit={true}
                            in={false}
                            mountOnEnter={false}
                            onEnter={[Function]}
                            onEntered={[Function]}
                            onEntering={[Function]}
                            onExit={[Function]}
                            onExited={[Function]}
                            onExiting={[Function]}
                            role="alert"
                            tag="div"
                            timeout={150}
                            unmountOnExit={true}
                          >
                            <Transition
                              appear={true}
                              enter={true}
                              exit={true}
                              in={false}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={150}
                              unmountOnExit={true}
                            />
                          </Fade>
                        </Alert>
                      </ErrorAlert>
                      <input
                        className="form-control text-center center col-md-4"
                        onChange={[Function]}
                        pattern="(?=.*\\\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*\\\\W).{8,30}"
                        placeholder="New Password"
                        required={true}
                        type="password"
                        value=""
                      />
                      <div
                        className="invalid-feedback text-lg-center"
                      >
                        <FormattedMessage
                          id="Use a password of at least 8 characters: uppercase, lowercase letters, numbers and special characters"
                          values="Use a password of at least 8 characters: uppercase, lowercase letters, numbers and special characters"
                        >
                          Use a password of at least 8 characters: uppercase, lowercase letters, numbers and special characters
                        </FormattedMessage>
                      </div>
                    </div>
                    <button
                      className="btn btn-primary col-md-2"
                      type="submit"
                    >
                      <span
                        className="spinner-border-sm"
                      />
                       
                      <FormattedMessage
                        id="RESET"
                        values="RESET"
                      >
                        RESET
                      </FormattedMessage>
                    </button>
                  </form>
                </div>
              </div>
            </div>
          </Container>
          <Footer>
            <Container
              className="fixed-bottom footer"
              fluid={true}
            >
              <div
                className="fixed-bottom footer container-fluid"
              >
                <Row
                  className="justify-content-md-center"
                  noGutters={false}
                >
                  <div
                    className="justify-content-md-center row"
                  >
                    <Col
                      className="footer_text"
                      md="auto"
                    >
                      <div
                        className="footer_text col-md-auto"
                      >
                        <FormattedMessage
                          id="Copyright 2020 devrepublic team. All rights reserved."
                          values="Copyright 2020 devrepublic team. All rights reserved."
                        >
                          Copyright 2020 devrepublic team. All rights reserved.
                        </FormattedMessage>
                      </div>
                    </Col>
                  </div>
                </Row>
              </div>
            </Container>
          </Footer>
        </resetPassword>
      </Connect(resetPassword)>
    </injectIntl(Connect(resetPassword))>
  </Provider>
</IntlProvider>
`;
